// Use union find to detect cycle in undirected graph. if 2 roots are same cycle detected.
class Solution {
    public boolean validTree(int n, int[][] edges) {
        int arr[]=new int[n];
        // Initially each node is root of its own tree
        for (int i=0;i<n;i++) {
            arr[i]=i;
        }
        
        for (int i=0;i<edges.length;i++) {
            int a = edges[i][0];
            int b = edges[i][1];
            int roota = find(a,arr);
            int rootb = find(b,arr);
            if (roota==rootb) return false;
            else {
                arr[roota]=arr[rootb];
                n--;
            }
        }
        if (n==1) return true;
        else return false;
    }
    
    private int find(int node, int arr[]) {
        if (arr[node]==node) return node;
        int n=node;
        while (arr[n]!=n) {
            n=arr[n];
        }
        arr[node]=n;
        return n;
    }
}
