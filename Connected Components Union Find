// Union find optimizations
1) PATH COMPRESSION
 The idea is to flatten the tree when find() is called. 
 When find() is called for an element x, root of the tree is returned. 
 The find() operation traverses up from x to find root. 
 The idea of path compression is to make the found root as parent of x so 
 that we donâ€™t have to traverse all intermediate nodes again. 
 If x is root of a subtree, then path (to root) from all nodes under x also compresses.

2) UNION BY RANK
The above operations can be optimized to O(Log n) in worst case. 
The idea is to always attach smaller depth tree under the root of the deeper tree. 
This technique is called union by rank.

// Count number of connected components using union find
class Solution {
    public int countComponents(int n, int[][] edges) {
        Map<Integer,Integer> map = new HashMap<Integer,Integer>();
        
        for (int e=0;e<edges.length;e++) {
            int a = edges[e][0];
            int b = edges[e][1];
            int roota = find(a,map);
            int rootb = find(b,map);
            if (roota!=rootb) {
                map.put(roota,rootb);
                n--;
            }
        }
        return n;        
    }
    
    private int find(int node, Map<Integer,Integer> map) {
        if (!map.containsKey(node)) {
            map.put(node,node);
            return node;
        }
        while (map.get(node)!=node) {
            node = map.get(node);
        }
        return node;
    }
}

// Count the number of components using DFS
public class Solution {
    public int countComponents(int n, int[][] edges) {
        if (n <= 1)
            return n;
        Map<Integer, List<Integer>> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            map.put(i, new ArrayList<>());
        }
        for (int[] edge : edges) {
            map.get(edge[0]).add(edge[1]);
            map.get(edge[1]).add(edge[0]);
        }
        Set<Integer> visited = new HashSet<>();
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (visited.add(i)) {
                dfsVisit(i, map, visited);
                count++;
            }
        }
        return count;
    }
    
    private void dfsVisit(int i, Map<Integer, List<Integer>> map, Set<Integer> visited) {
        for (int j : map.get(i)) {
            if (visited.add(j))
                dfsVisit(j, map, visited);
        }
    }
}
